#+PROPERTY: header-args :results output silent
* Package Settings
** Setup extra repos
#+BEGIN_SRC emacs-lisp

(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

#+END_SRC
** Bootstrap `use-package`
#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

#+END_SRC




** Enabled Packages
*** org packages
**** COMMENT org-autolist
#+BEGIN_SRC emacs-lisp

(use-package org-autolist
  :after org
  :config
  (org-autolist-mode +1))

#+END_SRC
**** org
#+BEGIN_SRC emacs-lisp

(use-package org
  :ensure org-plus-contrib)

#+END_SRC
**** org-bullets
#+BEGIN_SRC emacs-lisp

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC
**** org-ref
#+BEGIN_SRC emacs-lisp

(use-package org-ref
  :after org
  :init
  (setq helm-bibtex-pdf-open-function
        (lambda (fpath)
          (start-process "open" "*open*" "open" fpath)))
  :config
  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "-"
        bibtex-autokey-year-title-separator "-"
        bibtex-autokey-titleword-separator "-"
        bibtex-autokey-titlewords 2
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5))

#+END_SRC
**** doi-utils
#+BEGIN_SRC emacs-lisp

(use-package doi-utils
  :after org)

#+END_SRC
**** org-ref-bibtex
#+BEGIN_SRC emacs-lisp

(use-package org-ref-bibtex
  :after org
  :init
  (setq org-ref-bibtex-hydra-key-binding "\C-cj"))

#+END_SRC
**** ob-async
#+BEGIN_SRC emacs-lisp

(use-package ob-async
  :ensure t)

#+END_SRC
**** ox-latex-subfigure
#+BEGIN_SRC emacs-lisp

(use-package ox-latex-subfigure
  :init
  (setq org-latex-prefer-user-labels t)
  :load-path "~/.emacs.d/includes/ox-latex-subfigure/"
  :config (require 'ox-latex-subfigure))

#+END_SRC
**** ox-gfm
#+BEGIN_SRC emacs-lisp

(use-package ox-gfm
  :ensure t)

#+END_SRC

*** htmlize
#+BEGIN_SRC emacs-lisp

(use-package htmlize
  :ensure t)

#+END_SRC
*** evil-mode
#+BEGIN_SRC emacs-lisp

(use-package evil
  :ensure t
  :config
  (evil-mode 1))

#+END_SRC
**** Sane tab behavior
#+BEGIN_SRC elisp

;(setq evil-want-C-i-jump nil)
;(define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)

#+END_SRC
*** COMMENT company
#+BEGIN_SRC emacs-lisp

(use-package company
  :defer t
  :diminish (company-mode . "CPY")
  :init
    (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-minimum-prefix-length 2
        company-selection-wrap-around t
        company-show-numbers t
        company-tooltip-align-annotations t
        company-require-match nil
        company-dabbrev-downcase nil
        company-dabbprev-ignore-case nil))

#+END_SRC
*** paradox
#+BEGIN_SRC emacs-lisp

(use-package paradox
  :ensure t
  :config
  (paradox-enable))

#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp

(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))

#+END_SRC

*** Helm
#+BEGIN_SRC emacs-lisp

(use-package helm
  :ensure t
  :init
  ;; Enable fuzzy matching
  (setq helm-M-x-fuzzy-match t
	helm-mode-fuzzy-match t
	helm-buffers-fuzzy-matching t
	helm-recentf-fuzzy-match t
	helm-locate-fuzzy-match t
	helm-semantic-fuzzy-match t
	helm-imenu-fuzzy-match t
	helm-completion-in-region-fuzzy-match t)

  ;; Other things from some tutorial
  (setq helm-candidate-number-list 150
	helm-split-window-in-side-p t
	helm-move-to-line-cycle-in-source t
	helm-echo-input-in-header-line t
	helm-autoresize-max-height 0
	helm-autoresize-min-height 20)

  ;; Fix [Display not ready] error
  (setq helm-exit-idle-delay 0)
  :config
  (helm-mode 1))

#+END_SRC
*** restart-emacs
#+BEGIN_SRC emacs-lisp

(use-package restart-emacs
  :ensure t
  :init
  (setq restart-emacs-restore-frames t))

#+END_SRC
*** which-key
#+BEGIN_SRC emacs-lisp

(use-package which-key
  :ensure t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode 1))

#+END_SRC

*** Custom keybindings
#+BEGIN_SRC emacs-lisp

(use-package general
  :ensure t
  :config (general-define-key
	   :states '(normal visual insert emacs)
	   :prefix "SPC"
	   :non-normal-prefix "M-SPC"
	   ;; "/"  '(counsel-rb :which-key "ripgrep") ; requires counsel package
	   "TAB"   '(switch-to-prev-buffer :which-key "previous buffer")
	   "SPC"   '(helm-M-x :which-key "M-x")
	   ":"     '(helm-M-x :which-key "M-x")
	   ;; File operations
	   "f"     '(:prefix t :which-key "files")
	   "ff"    '(helm-find-files :which-key "open files")
	   "fr"    '(helm-recentf :which-key "recent files")
	   ;; Buffer operations
	   "b"     '(:prefix t :which-key "buffers")
	   "b TAB" '(switch-to-prev-buffer :which-key "previous buffer")
	   "bb"    '(helm-buffers-list :which-key "buffers list")
	   "bq"    '(my-kill-this-buffer :which-key "close buffer")
	   ;; Window operations
	   "w"     '(:prefix t :which-key "windows")
	   "wl"    '(windmove-right :which-key "focus right")
	   "wh"    '(windmove-left :which-key "focus left")
	   "wk"    '(windmove-up :which-key "focus up")
	   "wj"    '(windmove-down :which-key "focus down")
	   "wv"    '(split-window-right :which-key "vertical split")
	   "w-"    '(split-window-below :which-key "horizontal split")
	   "wq"    '(delete-window :which-key "close window")
	   ;; Closing/Restarting
	   "q"     '(:prefix t :which-key "Quit/Restart")
	   "qq"    '(save-buffers-kill-terminal :which-key "quit")
	   "qr"    '(restart-emacs :which-key "restart")
	   ;; Misc
	   "at"    '(ansi-term :which-key "open terminal")))

#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp

(use-package projectile
  :ensure t
  :init
  (setq projectile-require-project-root nil)
  :config
  (projectile-mode 1))

#+END_SRC

*** All The Icons
#+BEGIN_SRC emacs-lisp

(use-package all-the-icons
  :ensure t)

#+END_SRC

*** NeoTree
#+BEGIN_SRC emacs-lisp

(use-package neotree
  :ensure t
  :init
  (setq neo-there (if (display-graphic-p) 'icons 'arrow)))

#+END_SRC

*** Emacs Speaks Statistics
#+BEGIN_SRC emacs-lisp

(use-package ess
  :ensure t)

#+END_SRC
*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC
*** linum-relative
#+BEGIN_SRC emacs-lisp

(use-package linum-relative
  :ensure t
  :init
  (progn
    (setq linum-relative-format "%3s ")
    ;; display current line instead of 0
    (setq linum-relative-current-symbol ""))
  :config
  (linum-relative-global-mode))

#+END_SRC
*** Languages
**** Python
#+BEGIN_SRC emacs-lisp

(use-package python
  :ensure t)

(use-package python-mode
  :ensure t)

(use-package ob-ipython
  :ensure t)

#+END_SRC
**** Matlab
#+BEGIN_SRC emacs-lisp

(use-package matlab-mode
  :ensure t)

#+END_SRC
**** Julia
#+BEGIN_SRC emacs-lisp

(use-package julia-mode
  :ensure t)

(use-package julia-repl
  :ensure t)

(use-package julia-shell
  :ensure t)

#+END_SRC
* Org Settings
** Indent subheadlines
#+BEGIN_SRC emacs-lisp

(setq org-startup-indented t)

#+END_SRC
** Source block indentation
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window)

(add-hook 'org-mode-hook
	  '(lambda ()
	     (define-key org-mode-map (kbd "RET") 'org-return-indent)))

(defun org-fix-newline-and-indent-in-src-blocks ()
  "How is this still broken in 2018"
  (when (org-in-src-block-p t)
    (org-babel-do-in-edit-buffer
     (call-interactively #'indent-for-tab-command))))

(advice-add #'org-return-indent :after #'org-fix-newline-and-indent-in-src-blocks)



#+END_SRC
** Org babel settings
*** Evaluate code without confirmation
#+BEGIN_SRC emacs-lisp

(setq org-confirm-babel-evaluate nil)

#+END_SRC
*** Enabled languages
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path (substitute-in-file-name "~/.emacs.d/includes/ob-julia/"))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python     . t)
   (ipython    . t)
   (julia      . t)
   (matlab     . t)
   (dot        . t)
   (latex      . t)))

#+END_SRC
*** Enable source highlighting for ipython
#+BEGIN_SRC emacs-lisp

(add-to-list 'org-latex-minted-langs '(ipython "python"))

#+END_SRC
*** Display images
#+BEGIN_SRC emacs-lisp

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)

#+END_SRC
** Export settings
*** Backends
**** ox-md
#+BEGIN_SRC emacs-lisp

(eval-after-load "org"
  '(require 'ox-md nil t))

#+END_SRC
**** ox-gfm
#+BEGIN_SRC emacs-lisp

(eval-after-load "org"
  '(require 'ox-gfm nil t))

#+END_SRC
*** 1 inch LaTeX margins
#+BEGIN_SRC emacs-lisp

(add-to-list 'org-latex-packages-alist '("margin=1in" "geometry" nil))

#+END_SRC
*** Hide links on LaTeX export
#+BEGIN_SRC emacs-lisp

(add-to-list 'org-latex-default-packages-alist
             '("hidelinks" "hyperref" nil))

#+END_SRC
*** Enable minted
#+BEGIN_SRC emacs-lisp

(setq org-latex-listings 'minted)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+END_SRC
*** Enable SVG embeds
#+BEGIN_SRC emacs-lisp

(add-to-list 'org-latex-packages-alist '("" "svg"))

#+END_SRC
*** COMMENT Enable float
#+BEGIN_SRC emacs-lisp

(add-to-list 'org-latex-packages-alist '("" "float"))

#+END_SRC
* UI Settings
** Disable unnecessary UI elements
#+BEGIN_SRC emacs-lisp

(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)

#+END_SRC

** Font settings
#+BEGIN_SRC emacs-lisp

(add-to-list 'default-frame-alist '(font . "hack-12"))
(add-to-list 'default-frame-alist '(height . 24))
(add-to-list 'default-frame-alist '(width . 80))

#+END_SRC
** Show matching parens
#+BEGIN_SRC emacs-lisp

(setq show-paren-delay 0)
(show-paren-mode 1)

#+END_SRC
** Confirmations are y-or-n instead of yes-or-no
#+BEGIN_SRC emacs-lisp

(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC
** Conceal
#+BEGIN_SRC emacs-lisp

(global-prettify-symbols-mode 1)

#+END_SRC
** No Tabs
#+BEGIN_SRC emacs-lisp

(setq-default indent-tabs-mode nil)

#+END_SRC
** Line wrap globally
#+BEGIN_SRC emacs-lisp

(global-visual-line-mode 1)

#+END_SRC
* Custom functions
** Kill active buffer
#+BEGIN_SRC emacs-lisp

(defun my-kill-this-buffer ()
  "Because kill-this-buffer doesn't seem to do anything"
  (interactive)
  (kill-buffer (current-buffer)))

#+END_SRC
* Misc
** Ensure path is setup properly
#+BEGIN_SRC emacs-lisp

(let ((path (shell-command-to-string ".~/.zshrc; echo -n $PATH")))
  (setenv "PATH" path)
  (setq exec-path
	(append
	 (split-string-and-unquote path ":")
	 exec-path)))

#+END_SRC

** Disable background for python variables and numbers
#+BEGIN_SRC emacs-lisp

(setq py-number-face nil)
(setq py-variable-name-face nil)

#+END_SRC
