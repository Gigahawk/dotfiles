#!/bin/bash

# json variable to store display info
json=""



# Takes in a list of displays as generated by i3outputs
function laptop_only {
  while read -r output; do
    if [ "$output" = "LVDS1" ]; then
      xrandr --output $output --auto
    else
      xrandr --output $output --off
    fi
  done <<< "$1"
}

# Takes json of displays and echoes the primary one
function get_primary {
  echo "$json" | jq '.[] | select(.primary)'
}

function was_success {
  echo $1
  if [ $1 -ne 0 ]; then
    exit $1
  fi
}

# Takes name of screen and checks if disabled
function is_disabled {
  local xpos=$(echo "$json" | jq ".[] | select(.key==\"$1\").xpos")
  local remaining=$(echo "$json" | jq '[ .[] | select(.xpos!=null).key ] | length')
  if [ "$xpos" = "null" ]; then
    # Screen is disabled, show enable
    echo 1
  elif [ "$remaining" -le 1 ]; then
    # Only display left, dont show enable
    echo 2
  else
    # Multiple displays remaining, show disable
    echo 0
  fi
}

function init_display_info {
  # Using --current speeds things up, may cause bugs tho
  display_info=$(
    xrandr  --current | sed -r \
      -e '/Screen/d' `# There is always only one \'screen\'`\
      -e '/disconnected/d' `# Ignore all disconnected outputs`\
      -e 's/^ *//g' `# Remove leading whitespace`\
      -e '/primary/a primary' `# Add new line for primary screen for later`\
      -e 's/(.*)\+([0-9]*)\+([0-9]*)(.*)/\1\4\n(\2,\3)/' `# Move display offset to its own line` |\
      sed 's/ .*//g' `# Remove everything after first word` |\
      sed '$!N;s/\n(\([0-9]*,[0-9]*\))/~\1/;P;D' `#Move extra \'primary\' line back up to previous line, seperate with \':\'`|\
      sed '$!N;s/\nprimary/=primary/;P;D' `#Move extra \'primary\' line back up to previous line, seperate with \':\'`|\
      sed -r ':a;N;$!ba;s/([0-9]{3,})\n([0-9])/\1,\2/g' `#Replace all newlines between resolution lines with commas`|\
      sed 'N;s/\n/:/' `# Concat every second line with a colon`
  )
}

function init_json {
  init_display_info
  # Convert input to json
  json=$(
    echo "["
    while read -r output; do
      screen=$(echo "$output" | cut -f1 -d:)
      res=$(echo "$output" | cut -f2 -d:)
      s=$(echo -e "$screen\n$res")
      echo "$(
        jq -Rn '
          ( input | split("=") ) as $info |
          ( $info[0]+"" | split("~")[0] ) as $name |
          ( $info[0]+"" | split("~")[1] ) as $position |
          ( $position+"" | split(",")[0] ) as $xpos |
          ( $position+"" | split(",")[1] ) as $ypos |
          ( $info[1] | .=="primary" ) as $primary |
          ( inputs | split(",") ) as $res |
          [ [$name,$xpos, $ypos, $primary, $res] |
            {key:"key",value:.[0]},
            {key:"xpos",value:.[1]},
            {key:"ypos",value:.[2]},
            {key:"primary",value:.[3]},
            {key:"res",value:.[4]}
          ] |  from_entries
        ' <<< "$s"
      ),"
    done <<< "$display_info"
  )

  # Remove trailing comma, add closing brackets
  json="${json::-1}]"
}

function get_resolution_list {
  local name=$1
  echo "$(echo $json | jq ".[] | select(.key==\"$name\").res" | sed '/\[/d;/\]/d;s/[\",]//g;s/^ *//g')"
}

# Takes in a list of displays as generated by display_info
function main_menu {
  init_json
  local primary_name=$(get_primary "$json" | jq '.key' | sed 's/\"//g')
  echo "primary $primary_name"

  local options=$(echo "$json" | jq -r '.[] | .key' | sed "s/$primary_name/$primary_name (Primary)/g")$'\nManual Configuration'
  echo "$options"
  local selection
  selection=$(echo "$options" | dmenu_wrapper -p "Display Config")
  was_success $?

  case $selection in
    "$primary_name (Primary)")
      configure_primary "$primary_name"
      ;;
    "Manual Configuration")
      arandr
      ;;
    *)
      configure_external "$selection"
      ;;
  esac
}

function get_resolution {
  local name=$1
  local res=$2
  local resolution
  local retVal
  resolution=$(echo "$res" | dmenu_wrapper -p "$name Resolution")
  retVal=$?
  echo $resolution
  return $retVal
}

# Configure primary display
function configure_primary {
  local name=$1
  local resolutions=$(get_resolution_list "$name")
  local options='Set Resolution'

  local disabled=$(is_disabled $name)
  if [ "$disabled" -eq 0 ]; then
    options+=$'\nDisable'
  elif [ "$disabled" -eq 1 ]; then
    options+=$'\nEnable'
  fi

  local select=$(echo "$options" | dmenu_wrapper -p "$name")
  was_success $?
  case $select in
    "Set Resolution")
      local resolution
      resolution=$(get_resolution "$name" "$resolutions")
      if [ "$?" -eq 0 ]; then
        xrandr --output $name --mode $resolution
      fi
      ;;
    Enable)
      xrandr --output $name --auto
      ;;
    Disable)
      xrandr --output $name --off
      exit 0 # Exit because the menu might go away
      ;;
    *)
      echo $select
      ;;
  esac
  main_menu
}

# Configure external display.
# $1 is display name,
function configure_external {
  local name=$1
  local resolutions=$(get_resolution_list "$selection")
  local pname=$(echo $(get_primary) | jq -r '.key')
  local options=$(cat <<END
Duplicate
Extend Left
Extend Right
Extend Up
Extend Down
Set Resolution
END
  )
  local disabled=$(is_disabled $name)
  if [ "$disabled" -eq 0 ]; then
    options+=$'\nDisable'
  elif [ "$disabled" -eq 1 ]; then
    options+=$'\nEnable'
  fi
  local select=$(echo "$options" | dmenu_wrapper -p "$name")
  was_success $?
  case $select in
    Duplicate)
      local resolution
      resolution=$(get_resolution "$name" "$resolutions")
      if [ "$?" -eq 0 ]; then
        xrandr --output $pname --auto --scale-from $resolution --output $name --mode $resolution --scale 1x1 --same-as $pname
      fi
      ;;
    "Extend Left")
      local min_sorted=$(echo "$json" | jq -r 'sort_by(.xpos) | .[].key')
      min_sorted=(${min_sorted[@]})
      if [ "$name" = "${min_sorted[0]}" ]; then
        echo "already max left, moving to home"
        xrandr --output $name --auto --left-of "$pname"
      else
        echo "moving to the left"
        xrandr --output $name --auto --left-of "${min_sorted[0]}"
      fi
      ;;
    "Extend Right")
      local max_sorted=$(echo "$json" | jq -r 'sort_by(.xpos) | reverse | .[].key')
      max_sorted=(${max_sorted[@]})
      if [ "$name" = "${max_sorted[0]}" ]; then
        echo "already max right"
        xrandr --output $name --auto --right-of "$pname"
      else
        echo "moving to the right"
        xrandr --output $name --auto --right-of "${max_sorted[0]}"
      fi
      ;;
    "Extend Up")
      local min_sorted=$(echo "$json" | jq -r 'sort_by(.ypos) | .[].key')
      min_sorted=(${min_sorted[@]})
      if [ "$name" = "${min_sorted[0]}" ]; then
        echo "already max up"
        xrandr --output $name --auto --above "$pname"
      else
        echo "moving up"
        xrandr --output $name --auto --above "${min_sorted[0]}"
      fi
      ;;
    "Extend Down")
      local max_sorted=$(echo "$json" | jq -r 'sort_by(.ypos) | reverse | .[].key')
      max_sorted=(${max_sorted[@]})
      if [ "$name" = "${max_sorted[0]}" ]; then
        echo "already max down"
        xrandr --output $name --auto --below "$pname"
      else
        echo "moving up"
        xrandr --output $name --auto --below "${max_sorted[0]}"
      fi
      ;;
    "Set Resolution")
      local resolution
      resolution=$(get_resolution "$name" "$resolutions")
      if [ "$?" -eq 0 ]; then
        xrandr --output $name --mode $resolution
      fi
      ;;
    Enable)
      xrandr --output $name --auto
      ;;
    Disable)
      xrandr --output $name --off
      exit 0 # Exit because the menu might go away
      ;;
    *)
      echo $select
      ;;
  esac
  main_menu
}

init_display_info

# If the only display is the laptop
if [ ! "$(echo "$display_info" | sed '/primary/d')" ]; then
  # Only laptop screen connected, check if i3 has been updated
  echo "laptop only"
  i3outputs=$(i3-msg -t get_outputs | jq '.[] | select(.current_workspace!=null).name' | sed 's/\"//g')
  if [ $(echo "$i3outputs" | wc -l) \> 1 ]; then
    # i3 still has workspaces in non-existent displays
    laptop_only "$i3outputs"
  fi
  exit 0
else
  main_menu
  echo "with display"
fi

exit 0


